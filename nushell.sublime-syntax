%YAML 1.2
---
# - https://www.sublimetext.com/docs/syntax.html
# - https://www.nushell.sh/book/
name: Nushell
scope: source.nu

file_extensions:
  - nu

first_line_match: |-
  (?xi:
    ^ \#! .* \b(nu)\b            # shebang
  )

variables:
  var_name: '[A-Za-z_][A-Za-z\d\-_]*'
  type_name: '[A-Za-z_][A-Za-z\d\-_]*'
  long_flag: '--[A-Za-z\d\-_]+'
  short_flag: '-[A-Za-z\d\-_]'
  const_str: '[A-Za-z\d\-_]+'
  number: '[+-]?\d+'
  pos_decimal: '\d+(\.\d*)?'

contexts:
  main:
    - include: assign-variable
    - include: punctuation
    - include: comment
    - include: keyword
    - include: record-block
    - include: for-variable
    - include: module
    - include: command
    - include: extern

  keyword:
    - match: |-
        (?x:
          \b(
            and|as-datetime|arg-unique|agg-groups|arg-where|all-false|arg-true|arg-sort|all-true|as-date|arg-min|
            arg-max|append|ansi|ast|any|all|agg|as|benchmark|bytes|break|bits|catch|concatenate|commandline|cumulative|
            count-null|concat-str|continue|contains|complete|compact|columns|collect|config|count|clear|cache|char|col|
            cal|cp|cd|drop-duplicates|drop-nulls|describe|dummies|default|dtypes|df-not|decode|debug|drop|date|du|do|
            export-env|expr-not|explode|export|encode|every|enter|exit|exec|echo|each|env|else|filter-with|fill-null|
            flatten|fill-na|format|filter|first|fetch|from|find|fmt|fn|get-nanosecond|get-weekday|get-ordinal|
            get-second|get-minute|get-month|group-by|get-year|get-week|get-hour|get-day|gstat|group|grid|glob|get|g|
            histogram|hide-env|history|headers|hide|help|hash|is-duplicated|is-not-null|is-unique|is-empty|is-admin|
            is-null|insert|ignore|is-in|input|into|inc|if|join|keybindings|kill|lowercase|load-env|length|ls-df|lines|
            loop|list|last|lit|ls|metadata|median|mkdir|merge|move|melt|mean|math|mut|min|max|mv|nu-highlight|
            nu-example-3|nu-example-2|nu-example-1|nu-check|n-unique|n|or|otherwise|open-df|open|par-each|prepend|print|
            parse|post|port|path|ps|p|quantile|query|run-external|replace-all|register|rolling|reverse|replace|rotate|
            return|rename|reject|reduce|random|range|roll|rm|set-with-idx|str-lengths|source-env|str-slice|strftime|
            split-by|summary|sort-by|shuffle|source|shells|select|schema|sample|split|slice|sleep|shift|shape|sort|skip|
            size|save|sys|sum|str|std|set|seq|transpose|tutor|touch|table|take|try|to|uppercase|upsert|update|unique|
            uniq|use|url|value-counts|view-source|version|var|with-column|with-env|window|while|which|where|watch|wrap|
            when|zip|

            (update)\s(cells)|
            (url)\s(parse)|
            (take)\s(until|while)|
            (term)\s(size)|
            (to)\s(arrow|csv|html|json|md|nuon|parquet|text|toml|tsv|url|xml|yaml)|
            (seq)\s(char|date)|
            (skip)\s(until|while)|
            (split)\s(chars|column|list|row|words)|
            (str)\s(
              camel-case|capitalize|collect|contains|distance|downcase|ends-with|find-replace|index-of|join|kebab-case|
              length|lpad|pascal-case|replace|reverse|rpad|screaming-snake-case|snake-case|starts-with|substring|
              title-case|to-datetime|to-decimal|to-int|trim|upcase
            )|
            (random)\s(bool|chars|decimal|dice|integer|uuid)|
            (registry)\s(query)|
            (roll)\s(down|left|right|up)|
            (query)\s(db|df|json|web|xml)|
            (path)\s(basename|dirname|exists|expand|join|parse|relative-to|split|type)|
            (overlay)\s(hide|list|new|use)|
            (math)\s(abs|avg|ceil|eval|floor|max|median|min|mode|product|round|sqrt|stddev|sum|variance)|
            (keybindings)\s(default|list|listen)|
            (into)\s(binary|bool|datetime|decimal|df|duration|filesize|int|lazy|nu|record|sqlite|string)|
            (hash)\s(base64|md5|sha256)|
            (help)\s(operators)
            (history)\s(session)|
            (format)\s(filesize)|
            (from)\s(csv|eml|ics|ini|json|nuon|ods|parquet|ssv|toml|tsv|url|vcf|xlsx|xml|yaml|yml)|
            (each)\s(while)|
            (encode)(\sbase64)|
            (error)\s(make)|
            (export)\s(alias|def|def-env|extern|use)|
            (date)\s(format|humanize|list-timezone|now|to-record|to-table|to-timezone)|
            (decode)\s(base64)|
            (detect)\s(columns)|
            (drop)\s(column|nth)|
            (ansi)\s(gradient|strip)|
            (bytes)\s(add|at|build|collect|ends-with|index-of|length|remove|replace|reverse|starts-with)|
            (bits)\s(and|not|or|rol|ror|shl|shr|xor)|
            (config)\s(env|nu|reset)|
            (custom-value)\s(generate|generate2|update)|
          )\b
        )
      captures:
        1: keyword.nushell

    - match: \btrue|false
      scope: keyword.other.unit.nushell

    - match: \bout>|err>|out\+err>|err\+out>
      scope: keyword.other.redirect.nushell

  expression:
    - include: date  # Include before integer
    - include: duration  # Include before integer
    - include: binary  # Include before file-size
    - include: file-size  # Include before integer
    - include: range  # Include before integer
    - include: integer
    - include: decimal
    - include: boolean
    # - include: list
    - include: record-block
    # - include: table
    - include: literal-null
    - include: interpolated-string
    - include: string  # Include last to avoid conflicts

    - include: variable-keyword

  date:
    - match: |-
        (?x:
          (\d+)-(0[1-9]|1[012])-(0[1-9]|[12]\d|3[01])
          (
            [Tt]
            ([01]\d|2[0-3]):([0-5]\d):([0-5]\d|60)(\.\d+)?
            (([Zz])|([\+|\-]([01]\d|2[0-3]):[0-5]\d))?
          )?
        )
      scope: constant.date.nushell
      pop: 1

  duration:
    - match: '{{pos_decimal}}(ns|us|ms|sec|min|hr|day|wk)'
      scope: constant.duration.nushell
      pop: 1

  file-size:
    - match: '{{pos_decimal}}(b|kb|mb|gb|tb|pb|eb|zb|kib|mib|gib|tib|pib|eib|zib)'
      scope: constant.file-size.nushell
      pop: 1

  range:
    - match: |-
        (?x:
          {{number}}\.\.<?{{number}}|
          {{number}}\.\.|
          \.\.<?{{number}}
        )
      scope: constant.range.nushell
      pop: 1

  integer:
    - match: -?\d+(?!\.)
      scope: constant.numeric.integer.nushell
      pop: 1

  decimal:
    - match: '[+-]?((\d*[.])?\d+|Infinity|NaN)'
      scope: constant.numeric.decimal.nushell
      pop: 1

  boolean:
    - match: 'true'
      scope: constant.language.boolean.true.nushell
      pop: 1
    - match: 'false'
      scope: constant.language.boolean.false.nushell
      pop: 1

  binary:
    - include: binary-hex
    - include: binary-bin
    - include: binary-oct

  binary-hex:
    - match: 0x\[
      scope: punctuation.definition.binary.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.binary.hex.nushell
        - match: '[\da-fA-F]{1,2}'
          scope: constant.numeric.hex.nushell
        - match: \]
          scope: punctuation.definition.binary.end.nushell
          pop: 1
      pop: 1

  binary-bin:
    - match: 0b\[
      scope: punctuation.definition.binary.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.binary.bin.nushell
        - match: '[01]{1,8}'
          scope: constant.numeric.bin.nushell
        - match: \]
          scope: punctuation.definition.binary.end.nushell
          pop: 1
      pop: 1

  binary-oct:
    - match: 0o\[
      scope: punctuation.definition.binary.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.binary.oct.nushell
        - match: '[0-7]{1,3}'
          scope: constant.numeric.oct.nushell
        - match: \]
          scope: punctuation.definition.binary.end.nushell
          pop: 1
      pop: 1

  interpolated-string:
    - include: interpolated-single-quoted-string
    - include: interpolated-double-quoted-string

  interpolated-single-quoted-string:
    - match: \$'
      scope: punctuation.definition.string.interpolated.begin.nushell
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.interpolated.nushell string.interpolated.single.nushell
        - match: \(
          push:
            - include: expression
            - match: \)
              pop: 1
        - match: \'
          scope: punctuation.definition.string.interpolated.end.nushell
          pop: 1

  interpolated-double-quoted-string:
    - match: \$"
      scope: punctuation.definition.string.interpolated.begin.nushell
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.interpolated.nushell string.interpolated.double.nushell
        - match: \(
          push:
            - include: expression
            - match: \)
              pop: 1
        - match: \"
          scope: punctuation.definition.string.interpolated.end.nushell
          pop: 1
        - include: double-quoted-string-content

  string:
    - include: literal-single-quoted-string
    - include: literal-backtick-quoted-string
    - include: literal-double-quoted-string
    - include: literal-bare-string

  literal-single-quoted-string:
    - match: \'
      scope: punctuation.definition.string.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.nushell string.quoted.single.nushell
        - match: \'
          scope: punctuation.definition.string.end.nushell
          pop: 1
      pop: 1

  literal-backtick-quoted-string:
    - match: \`
      scope: punctuation.definition.string.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.nushell string.quoted.backtick.nushell
        - match: \`
          scope: punctuation.definition.string.end.nushell
          pop: 1
      pop: 1

  double-quoted-string-content:
    - match: \\\n
      scope: constant.character.escape.newline.nushell
    - match: \\(?:[0-7]{3}|x\h{2}|u\h{4}|\U\h{8}|[abefnrtv\\'"?])
      scope: constant.character.escape.nushell

  literal-double-quoted-string:
    - match: \"
      scope: punctuation.definition.string.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.nushell string.quoted.double.nushell
        - match: \"
          scope: punctuation.definition.string.end.nushell
          pop: 1
        - include: double-quoted-string-content
      pop: 1

  literal-bare-string:
    - match: \w+
      scope: string.bare.nushell
      pop: 1

  variable-keyword:
    - match: \${{var_name}}
      scope: variable.language.nushell
      pop: 1

  assign-variable:
    - match: (alias|let|let-env)\s+(\$?{{var_name}})\s*=
      scope: variable.nushell
      captures:
        1: keyword.other.nushell
        2: variable.name.nushell
      push: expression

  for-variable:
    - match: (for)\s+(\$?{{var_name}})(in)
      scope: variable.nushell
      captures:
        1: keyword.other.nushell
        2: variable.name.nushell
        3: keyword.other.nushell

  punctuation:
    - match: \,
      scope: punctuation.comma.nushell

    - match: ;
      scope: punctuation.semi.nushell

  comment:
    - match: (#)(.*)
      captures:
        1: comment.line.number-sign.nushell
        2: comment.line.nushell

  literal-null:
    - match: \bnull\b
      scope: constant.language.null.nushell
      pop: 1

  record-block:
    - match: (?=\{)
      branch_point: open_curly
      branch:
        - record
        - block

  record:
    - match: '\{'
      scope: punctuation.section.record.begin.nushell
      push:
        - meta_scope: meta.record.nushell
        - include: comment
        - match: \|
          fail: open_curly
        - match: '(?={{var_name}}:)'
          set:
            - meta_scope: meta.record.nushell
            - include: comment
            - match: '({{var_name}})(:)'
              captures:
                1: entity.name.label.nushell
                2: punctuation.separator.key-value.nushell
              push: expression
            - match: '\}'
              scope: punctuation.section.record.end.nushell
              pop: 3

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.nushell
      push:
        - meta_scope: meta.block.nushell
        - include: comment
        - match: \|
          scope: punctuation.section.group.begin.nushell
          set:
            - meta_scope: meta.block.parameters.nushell
            - match: '{{var_name}}'
              scope: variable.parameter.nushell
            - match: \,
              scope: punctuation.separator.parameter.command.nushell
            - match: \|
              scope: punctuation.section.group.end.nushell
              set:
                - meta_scope: meta.block.nushell
                - include: main
                - match: '\}'
                  scope: punctuation.section.block.end.nushell
                  pop: 3

  code-block:
    - match: '\{'
      scope: punctuation.section.block.begin.nushell
      push:
        - meta_scope: meta.block.nushell
        - include: main
        - match: '\}'
          scope: punctuation.section.block.end.nushell
          pop: 3

  module:
    - match: \b(module)\s+
      captures:
        1: keyword.module.nushell
      push:
        - meta_scope: meta.module.nushell
        - match: \'
          scope: entity.name.module.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.module.nushell
            - match: \'
              scope: entity.name.module.end.nushell
              set: code-block
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: code-block

        - match: \`
          scope: entity.name.module.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.module.nushell
            - match: \`
              scope: entity.name.module.end.nushell
              set: code-block
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: code-block

        - match: \"
          scope: entity.name.module.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.module.nushell
            - match: \"
              scope: entity.name.module.end.nushell
              set: code-block
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: code-block
            - include: double-quoted-string-content

        - match: ({{var_name}})
          scope: entity.name.module.nushell
          set: code-block

  command-parameters:
    - meta_scope: meta.command.parameters.nushell
    - match: \[
      scope: punctuation.section.group.begin.nushell
      push:
        - include: command-parameter
        - match: \,
          scope: punctuation.separator.parameter.command.nushell
        - include: comment
        - match: \]
          scope: punctuation.section.group.end.nushell
          push: code-block
          pop: 2

  command-parameter:
    - match: |-
        (?x:
          ({{var_name}})
          (\?)?
          (?:
            (:)\s*({{type_name}})
            (?:(@)(".+?"))?
          )?
        )
      captures:
        1: variable.parameter.nushell
        2: keyword.operator.optional.nushell
        3: punctuation.separator.type.nushell
        4: storage.type.nushell
        5: keyword.operator.completion.nushell
        6: variable.function.completion.nushell
    - match: |-
        (?x:
          ({{long_flag}})
          (?:\(({{short_flag}})\))?
          (?:(:)\s*({{type_name}}))?
        )
      captures:
        1: variable.parameter.long.nushell
        2: variable.parameter.short.nushell
        3: punctuation.separator.type.nushell
        4: storage.type.nushell
    - match: |-
        (?x:
          ({{short_flag}})
          (?:(:)\s*({{type_name}}))?
        )
      captures:
        1: variable.parameter.short.nushell
        2: punctuation.separator.type.nushell
        3: storage.type.nushell

  command:
    - match: \b(def|def-env)\s+
      captures:
        1: keyword.declaration.nushell
      push:
        - meta_scope: meta.command.nushell

        - match: \'
          scope: entity.name.command.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.command.nushell
            - match: \'
              scope: entity.name.command.end.nushell
              set: command-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: command-parameters

        - match: \`
          scope: entity.name.command.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.command.nushell
            - match: \`
              scope: entity.name.command.end.nushell
              set: command-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: command-parameters

        - match: \"
          scope: entity.name.command.begin.nushell
          push:
            - meta_include_prototype: false
            - meta_scope: entity.name.command.nushell
            - match: \"
              scope: entity.name.command.end.nushell
              set: command-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: command-parameters
            - include: double-quoted-string-content

        - match: ({{var_name}})
          scope: entity.name.command.nushell
          set: command-parameters

  extern:
    - match: \b(extern)\s+
      captures:
        1: keyword.extern.nushell
      push:
        - meta_scope: meta.extern.nushell
        - match: \'
          scope: entity.name.extern.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.extern.nushell
            - match: \'
              scope: entity.name.extern.end.nushell
              set: extern-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: extern-parameters

        - match: \`
          scope: entity.name.extern.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.extern.nushell
            - match: \`
              scope: entity.name.extern.end.nushell
              set: extern-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: extern-parameters

        - match: \"
          scope: entity.name.extern.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.extern.nushell
            - match: \"
              scope: entity.name.extern.end.nushell
              set: extern-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: extern-parameters
            - include: double-quoted-string-content

        - match: ({{var_name}})
          scope: entity.name.extern.nushell
          set: extern-parameters

  extern-parameters:
    - meta_scope: meta.extern.parameters.nushell
    - match: \[
      scope: punctuation.section.group.begin.nushell
      push:
        - include: command-parameter
        - include: comment
        - match: \]
          scope: punctuation.section.group.end.nushell
          pop: 2
