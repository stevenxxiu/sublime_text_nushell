%YAML 1.2
---
# - https://www.sublimetext.com/docs/syntax.html
# - https://www.nushell.sh/book/
name: Nushell
scope: source.shell.nu

file_extensions:
  - nu

first_line_match: |-
  (?xi:
    ^ \#! .* \b(nu)\b            # shebang
  )

variables:
  var_name: '[A-Za-z_][A-Za-z\d\-_]*'
  type_name: '[A-Za-z_][A-Za-z\d\-_]*'
  long_flag: '--[A-Za-z\d\-_]+'
  short_flag: '-[A-Za-z\d\-_]'
  number: '[+-]?\d+'
  pos_decimal: '\d+(\.\d*)?'
  double_quoted_string_escape: '\\(["''\\/bfrnt]|u\{\h{1,6}\})'
  quoted_string: '''.*?''|"({{double_quoted_string_escape}}|.)*?"|`.*?`'
  bare_string: '[^\s#$();\[\]{|}][^\s#$();\[\]|]*'
  bare_string_record_list: '[^\s#$(),;\[\]{|}]+'
  operator: |-
    (?x:
      (?<=^|\s)(?:
        \+|-|\*|/|//|mod|\*\*|
        ==|!=|<|<=|>|>=|
        =~|!~|
        in|not-in|not|&&|and|\|\||or|xor|
        bit-or|bit-xor|bit-and|bit-shl|bit-shr|
        starts-with|ends-with|
        \+\+
      )(?=\s|$)
    )
  core_native_command: |-
    (?x:
      alias|ast|break|commandline|const|continue|debug|def|def-env|describe|do|du|echo|error\ make|export\ alias|
      export\ def|export\ def-env|export\ extern|export\ use|extern|for|help\ aliases|help\ commands|help\ modules|
      help\ operators|hide|hide-env|if|ignore|is-admin|let|loop|metadata|module|mut|overlay\ hide|overlay\ list|
      overlay\ new|overlay\ use|register|return|source|source-env|try|use|view-source|while
    )
  native_command: |-
    (?x:
      # bits
      bits\ and|bits\ not|bits\ or|bits\ rol|bits\ ror|bits\ shl|bits\ shr|bits\ xor|
      # bytes
      bytes\ add|bytes\ at|bytes\ build|bytes\ collect|bytes\ ends-with|bytes\ index-of|bytes\ length|bytes\ remove|
      bytes\ replace|bytes\ reverse|bytes\ starts-with|
      # conversions
      fmt|into\ binary|into\ bool|into\ datetime|into\ duration|into\ filesize|into\ int|into\ record|into\ sqlite|
      into\ string|
      # database
      query\ db|schema|
      # dataframe
      all-false|all-true|arg-max|arg-min|arg-sort|arg-true|arg-unique|as-date|as-datetime|concatenate|contains|
      count-null|cumulative|df-not|drop-duplicates|drop-nulls|dtypes|dummies|get-day|get-hour|get-minute|get-month|
      get-nanosecond|get-ordinal|get-second|get-week|get-weekday|get-year|into\ df|is-duplicated|is-unique|lowercase|
      ls-df|melt|open-df|query\ df|replace|replace-all|rolling|sample|set|set-with-idx|shape|slice|str-lengths|
      str-slice|strftime|summary|to\ arrow|to\ parquet|uppercase|value-counts|
      # dataframe expression
      into\ nu|is-in|is-not-null|is-null|n-unique|
      # dataframe expression filters
      first|last|
      # dataframe filters
      append|columns|get|
      # dataframe formats
      to\ csv|
      # dataframe or lazyframe
      filter-with|shift|unique|with-column|
      # dataframe or lazyframe filters
      rename|
      # date
      date\ format|date\ humanize|date\ list-timezone|date\ now|date\ to-record|date\ to-table|date\ to-timezone|
      # default
      hash\ md5|hash\ sha256|histogram|inc|into\ decimal|path\ basename|path\ dirname|path\ exists|path\ expand|
      path\ join|path\ parse|path\ relative-to|path\ split|path\ type|reduce|split-by|str\ substring|str\ trim|
      str\ upcase|transpose|version|
      # default lazyframe
      group-by|
      # deprecated
      hash\ base64|math\ eval|str\ collect|str\ find-replace|str\ to-datetime|str\ to-decimal|str\ to-int|
      # env
      config\ env|config\ nu|config\ reset|env|export-env|let-env|with-env|
      # experimental
      from\ nuon|to\ nuon|
      # expression
      agg-groups|arg-where|as|col|concat-str|count|explode|expr-not|list|lit|otherwise|when|
      # expression filters
      flatten|
      # expression lazyframe
      max|mean|median|min|quantile|std|sum|var|
      # filesystem
      cd|cp|glob|load-env|ls|mkdir|mv|open|rm|save|start|touch|watch|
      # filters
      all|any|compact|default|drop\ column|drop\ nth|each\ while|enumerate|every|find|group|headers|insert|is-empty|
      length|lines|merge|move|par-each|prepend|query\ json|query\ xml|range|reject|roll\ down|roll\ left|roll\ right|
      roll\ up|rotate|shuffle|skip\ until|skip\ while|sort|split\ list|take\ until|take\ while|uniq|uniq-by|
      update\ cells|upsert|values|where|window|wrap|zip|
      # filters lazyframe
      collect|filter|reverse|select|sort-by|
      # formats
      from\ csv|from\ eml|from\ ics|from\ ini|from\ json|from\ ods|from\ ssv|from\ toml|from\ tsv|from\ url|from\ vcf|
      from\ xlsx|from\ xml|from\ yaml|from\ yml|to\ html|to\ json|to\ md|to\ text|to\ toml|to\ tsv|to\ xml|to\ yaml|
      # generators
      cal|seq\ char|seq\ date|
      # hash
      decode\ base64|encode\ base64|
      # lazyframe
      agg|cache|fetch|fill-nan|fill-null|into\ lazy|join|
      # math
      math\ abs|math\ arccos|math\ arccosh|math\ arcsin|math\ arcsinh|math\ arctan|math\ arctanh|math\ avg|math\ ceil|
      math\ cos|math\ cosh|math\ e|math\ floor|math\ ln|math\ log|math\ max|math\ median|math\ min|math\ mode|math\ pi|
      math\ product|math\ round|math\ sin|math\ sinh|math\ sqrt|math\ stddev|math\ sum|math\ tan|math\ tanh|math\ tau|
      math\ variance|
      # misc
      history\ session|tutor|
      # network
      http\ get|http\ post|port|query\ web|url\ build-query|url\ join|url\ parse|
      # platform
      ansi\ gradient|ansi\ link|ansi\ strip|clear|input|keybindings\ default|keybindings\ list|keybindings\ listen|kill|
      sleep|term\ size|
      # prompt
      gstat|
      # random
      random\ bool|random\ chars|random\ decimal|random\ dice|random\ integer|random\ uuid|
      # shells
      enter|exit|g|n|p|shells|
      # strings
      char|detect\ columns|format\ filesize|nu-check|nu-highlight|parse|print|size|split\ chars|split\ column|
      split\ row|split\ words|str\ camel-case|str\ capitalize|str\ contains|str\ distance|str\ downcase|str\ ends-with|
      str\ index-of|str\ join|str\ kebab-case|str\ length|str\ lpad|str\ pascal-case|str\ replace|str\ reverse|
      str\ rpad|str\ screaming-snake-case|str\ snake-case|str\ starts-with|str\ title-case|url\ encode|
      # system
      benchmark|complete|exec|ps|run-external|sys|which|
      # viewers
      explore|grid|table|

      # Commands with subcommands
      ansi|bits|bytes|config|date|decode|detect|drop|each|encode|error|export|format|from|hash|help|history|http|into|
      keybindings|math|overlay|path|query|random|roll|seq|skip|split|str|take|term|to|update|url
    )

contexts:
  main:
    - include: assign-variable
    - include: punctuation
    - include: comment
    - include: keyword
    - include: block-record
    - include: for-variable
    - include: module
    - include: command
    - include: extern
    - include: special-statements
    - include: function-call
    - include: variable
    - include: expression

  keyword:
    - match: \belse\b
      scope: keyword.control.conditional.else.nu

    - match: \bcatch\b
      scope: keyword.other.nu

    - match: \bout>|err>|out\+err>|err\+out>
      scope: keyword.other.redirect.nu

  expression:
    - include: subexpression
    - include: special-statements
    - include: explicit-expression
    - include: literal-bare-string
    - include: variable

  expression-if:
    - include: subexpression
    - include: explicit-expression
    - include: function-call
    - include: literal-bare-string
    - include: variable

  expression-record-list-table:
    - include: subexpression
    - include: explicit-expression
    - include: literal-bare-string-record-list
    - include: variable

  subexpression:
    - match: \(
      scope: punctuation.section.group.begin.nu
      push:
        - meta_scope: meta.group.nu
        - include: comment
        - include: special-statements
        - include: function-call-inline
        - include: explicit-expression
        - include: subexpression
        - include: literal-bare-string
        - include: variable
        - match: \)
          scope: punctuation.section.group.end.nu
          pop: 1

  explicit-expression:
    - include: date  # Include before integer
    - include: duration  # Include before integer
    - include: binary  # Include before file-size
    - include: file-size  # Include before integer
    - include: range  # Include before integer
    - include: integer
    - include: decimal
    - include: boolean
    - include: operator  # Include after atomic types
    - include: pipe
    - include: block-record
    - include: list-table
    - include: literal-null
    - include: interpolated-string
    - include: string

  operator:
    - match: ({{operator}})
      scope: keyword.operator.nu

  pipe:
    - match: (^|(?<!\|))\|(?!\|)
      scope: keyword.operator.pipe.nu

  date:
    - match: |-
        (?x:
          (\d+)-(0[1-9]|1[012])-(0[1-9]|[12]\d|3[01])
          (
            [Tt]
            ([01]\d|2[0-3]):([0-5]\d):([0-5]\d|60)(\.\d+)?
            (([Zz])|([\+|\-]([01]\d|2[0-3]):[0-5]\d))?
          )?
        )
      scope: constant.date.nu

  duration:
    - match: '{{pos_decimal}}(ns|us|ms|sec|min|hr|day|wk)'
      scope: constant.duration.nu

  file-size:
    - match: '(?i){{pos_decimal}}(b|kb|mb|gb|tb|pb|eb|zb|kib|mib|gib|tib|pib|eib|zib)'
      scope: constant.file-size.nu

  range:
    - match: |-
        (?x:
          {{number}}\.\.<?{{number}}|
          {{number}}\.\.|
          \.\.<?{{number}}
        )
      scope: constant.range.nu

  integer:
    - match: -?\d+(?!\.)(?=[^\w\.]|$)
      scope: constant.numeric.integer.nu

  decimal:
    - match: '[+-]?(((\d*\.)?\d+|Infinity|NaN)(?=[^\w\.]|$))'
      scope: constant.numeric.decimal.nu

  boolean:
    - match: 'true'
      scope: constant.language.boolean.true.nu
    - match: 'false'
      scope: constant.language.boolean.false.nu

  binary:
    - include: binary-hex
    - include: binary-bin
    - include: binary-oct

  binary-hex:
    - match: 0x\[
      scope: punctuation.definition.binary.begin.nu
      push:
        - meta_include_prototype: false
        - meta_scope: meta.binary.hex.nu
        - include: comment
        - match: '[\da-fA-F]{1,2}'
          scope: constant.numeric.hex.nu
        - match: \]
          scope: punctuation.definition.binary.end.nu
          pop: 1

  binary-bin:
    - match: 0b\[
      scope: punctuation.definition.binary.begin.nu
      push:
        - meta_include_prototype: false
        - meta_scope: meta.binary.bin.nu
        - include: comment
        - match: '[01]{1,8}'
          scope: constant.numeric.bin.nu
        - match: \]
          scope: punctuation.definition.binary.end.nu
          pop: 1

  binary-oct:
    - match: 0o\[
      scope: punctuation.definition.binary.begin.nu
      push:
        - meta_include_prototype: false
        - meta_scope: meta.binary.oct.nu
        - include: comment
        - match: '[0-7]{1,3}'
          scope: constant.numeric.oct.nu
        - match: \]
          scope: punctuation.definition.binary.end.nu
          pop: 1

  interpolated-string:
    - include: interpolated-single-quoted-string
    - include: interpolated-double-quoted-string

  interpolated-single-quoted-string:
    - match: \$'
      scope: punctuation.definition.string.interpolated.begin.nu
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.interpolated.nu string.interpolated.single.nu
        - include: subexpression
        - match: \'
          scope: punctuation.definition.string.interpolated.end.nu
          pop: 1

  interpolated-double-quoted-string:
    - match: \$"
      scope: punctuation.definition.string.interpolated.begin.nu
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.interpolated.nu string.interpolated.double.nu
        - include: subexpression
        - match: \"
          scope: punctuation.definition.string.interpolated.end.nu
          pop: 1
        - include: double-quoted-string-content

  string:
    - include: literal-single-quoted-string
    - include: literal-backtick-quoted-string
    - include: literal-double-quoted-string

  literal-single-quoted-string:
    - match: \'
      scope: punctuation.definition.string.begin.nu
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.nu string.quoted.single.nu
        - match: \'
          scope: punctuation.definition.string.end.nu
          pop: 1

  literal-backtick-quoted-string:
    - match: \`
      scope: punctuation.definition.string.begin.nu
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.nu string.quoted.backtick.nu
        - match: \`
          scope: punctuation.definition.string.end.nu
          pop: 1

  double-quoted-string-content:
    - match: \\\n
      scope: constant.character.escape.newline.nu
    - match: '{{double_quoted_string_escape}}'
      scope: constant.character.escape.nu

  literal-double-quoted-string:
    - match: \"
      scope: punctuation.definition.string.begin.nu
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.nu string.quoted.double.nu
        - match: \"
          scope: punctuation.definition.string.end.nu
          pop: 1
        - include: double-quoted-string-content

  literal-bare-string:
    - match: '{{bare_string}}'
      scope: string.bare.nu

  literal-bare-string-record-list:
    - match: '{{bare_string_record_list}}'
      scope: string.bare.nu

  variable:
    - match: (\${{var_name}})(?:(\.)({{var_name}}))?
      captures:
        1: variable.other.nu
        2: punctuation.accessor.nu
        3: meta.property.record.nu

  assign-variable:
    - match: (alias|let|let-env|mut)\s+(\$?{{var_name}})\s*(=)\s*
      captures:
        1: keyword.other.nu
        2: variable.name.nu
        3: keyword.operator.assignment.nu
      push:
        - include: expression
        - match: (?=.|$)
          pop: 1

  for-variable:
    - match: (for)\s+(\$?{{var_name}})\s+(in)
      scope: variable.nu
      captures:
        1: keyword.other.nu
        2: variable.name.nu
        3: keyword.other.nu

  punctuation:
    - match: \,
      scope: punctuation.comma.nu

    - match: ;
      scope: punctuation.semi.nu

  comment:
    - match: (#)(.*)
      captures:
        1: comment.line.number-sign.nu
        2: comment.line.nu

  literal-null:
    - match: \bnull\b
      scope: constant.language.null.nu

  block-record:
    - match: (?=\{)
      branch_point: open-curly
      branch:
        - block
        - record

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.nu
      push:
        - meta_scope: meta.block.nu
        - include: comment
        - match: '(?=({{var_name}}|{{quoted_string}}):)'
          fail: open-curly
        - match: \|
          scope: punctuation.section.group.begin.nu
          set:
            - meta_scope: meta.block.parameters.nu
            - match: '{{var_name}}'
              scope: variable.parameter.nu
            - match: \,
              scope: punctuation.separator.parameter.command.nu
            - match: \|
              scope: punctuation.section.group.end.nu
              set:
                - meta_scope: meta.block.nu
                - include: main
                - match: '\}'
                  scope: punctuation.section.block.end.nu
                  pop: 2
        - include: main
        - match: '\}'
          scope: punctuation.section.block.end.nu
          pop: 2

  record:
    - match: '\{'
      scope: punctuation.section.record.begin.nu
      push:
        - meta_scope: meta.record.nu
        - include: comment
        - match: '({{var_name}})(:)'
          captures:
            1: entity.name.label.nu
            2: punctuation.separator.key-value.nu
        - match: (?=({{quoted_string}}):)
          push:
            - include: string
            - match: ':'
              scope: punctuation.separator.key-value.nu
              pop: 1
        - include: expression-record-list-table
        - match: ','
          scope: punctuation.separator.comma.nu
        - match: '\}'
          scope: punctuation.section.record.end.nu
          pop: 2

  list-table:
    - match: '\['
      scope: punctuation.section.list-table.begin.nu
      push:
        - meta_scope: meta.list-table.nu
        - include: comment
        - match: ;
          scope: punctuation.terminator.header.nu
        - match: '\]'
          scope: punctuation.section.list-table.end.nu
          pop: 1
        - match: (?=.|$)
          push:
            - match: ','
              scope: punctuation.separator.comma.nu
            - include: expression-record-list-table
            - match: (?=[#;\]])
              pop: 1

  code-block:
    - match: '\{'
      scope: punctuation.section.block.begin.nu
      push:
        - meta_scope: meta.block.nu
        - include: main
        - match: '\}'
          scope: punctuation.section.block.end.nu
          pop: 2

  module:
    - match: \b(module)\s+
      captures:
        1: keyword.module.nu
      push:
        - meta_scope: meta.module.nu
        - match: \'
          scope: entity.name.module.begin.nu
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.module.nu
            - match: \'
              scope: entity.name.module.end.nu
            - match: \n
              scope: invalid.illegal.newline.nu

        - match: \`
          scope: entity.name.module.begin.nu
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.module.nu
            - match: \`
              scope: entity.name.module.end.nu
            - match: \n
              scope: invalid.illegal.newline.nu

        - match: \"
          scope: entity.name.module.begin.nu
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.module.nu
            - match: \"
              scope: entity.name.module.end.nu
            - match: \n
              scope: invalid.illegal.newline.nu
            - include: double-quoted-string-content

        - match: ({{var_name}})
          scope: entity.name.module.nu

        - include: code-block

  command-parameters:
    - meta_scope: meta.command.parameters.nu
    - match: \[
      scope: punctuation.section.group.begin.nu
      push:
        - include: command-parameter
        - match: \,
          scope: punctuation.separator.parameter.command.nu
        - include: comment
        - match: \]
          scope: punctuation.section.group.end.nu
          pop: 2

  command-parameter:
    - match: |-
        (?x:
          ({{var_name}})
          (\?)?
          (?:
            (:)\s*({{type_name}})
            (?:(@)(".+?"))?
          )?
        )
      captures:
        1: variable.parameter.nu
        2: keyword.operator.optional.nu
        3: punctuation.separator.type.nu
        4: storage.type.nu
        5: keyword.operator.completion.nu
        6: variable.function.completion.nu
    - match: |-
        (?x:
          ({{long_flag}})
          (?:\(({{short_flag}})\))?
          (?:(:)\s*({{type_name}}))?
        )
      captures:
        1: variable.parameter.long.nu
        2: variable.parameter.short.nu
        3: punctuation.separator.type.nu
        4: storage.type.nu
    - match: |-
        (?x:
          ({{short_flag}})
          (?:(:)\s*({{type_name}}))?
        )
      captures:
        1: variable.parameter.short.nu
        2: punctuation.separator.type.nu
        3: storage.type.nu

  command:
    - match: \b(export\s+)?(def|def-env)\s+
      captures:
        1: keyword.declaration.nu
        2: keyword.declaration.nu
      push:
        - meta_scope: meta.command.nu

        - match: \'
          scope: entity.name.command.begin.nu
          push:
            - meta_include_prototype: false
            - meta_scope: entity.name.command.nu
            - match: \'
              scope: entity.name.command.end.nu
              set: command-parameters
            - match: \n
              scope: invalid.illegal.newline.nu
              set: command-parameters

        - match: \`
          scope: entity.name.command.begin.nu
          push:
            - meta_include_prototype: false
            - meta_scope: entity.name.command.nu
            - match: \`
              scope: entity.name.command.end.nu
              set: command-parameters
            - match: \n
              scope: invalid.illegal.newline.nu
              set: command-parameters

        - match: \"
          scope: entity.name.command.begin.nu
          push:
            - meta_include_prototype: false
            - meta_scope: entity.name.command.nu
            - match: \"
              scope: entity.name.command.end.nu
              set: command-parameters
            - match: \n
              scope: invalid.illegal.newline.nu
              set: command-parameters
            - include: double-quoted-string-content

        - match: ({{var_name}})
          scope: entity.name.command.nu
          set: command-parameters

        - include: code-block

  extern:
    - match: \b(export\s+)?(extern)\s+
      captures:
        1: keyword.extern.nu
        2: keyword.extern.nu
      push:
        - meta_scope: meta.extern.nu
        - match: \'
          scope: entity.name.extern.begin.nu
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.extern.nu
            - match: \'
              scope: entity.name.extern.end.nu
              set: extern-parameters
            - match: \n
              scope: invalid.illegal.newline.nu
              set: extern-parameters

        - match: \`
          scope: entity.name.extern.begin.nu
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.extern.nu
            - match: \`
              scope: entity.name.extern.end.nu
              set: extern-parameters
            - match: \n
              scope: invalid.illegal.newline.nu
              set: extern-parameters

        - match: \"
          scope: entity.name.extern.begin.nu
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.extern.nu
            - match: \"
              scope: entity.name.extern.end.nu
              set: extern-parameters
            - match: \n
              scope: invalid.illegal.newline.nu
              set: extern-parameters
            - include: double-quoted-string-content

        - match: ({{var_name}})
          scope: entity.name.extern.nu
          set: extern-parameters

  extern-parameters:
    - meta_scope: meta.extern.parameters.nu
    - match: \[
      scope: punctuation.section.group.begin.nu
      push:
        - include: command-parameter
        - include: comment
        - match: \]
          scope: punctuation.section.group.end.nu
          pop: 2

  function-call:
    - match: (?<=^|[\s|])(?:({{core_native_command}})|({{native_command}})|(\^?{{var_name}}))(?=[\s;|]|$)
      captures:
        1: meta.function-call.identifier.nu keyword.other.nu
        2: meta.function-call.identifier.nu support.function.nu
        3: meta.function-call.identifier.nu variable.function.nu
      push:
        - meta_content_scope: meta.function-call.arguments.nu
        - match: (?=\s*[#;\]{}|]|\s*$)
          pop: 1
        - include: expression

  function-call-inline:
    - match: (?:({{core_native_command}})|({{native_command}})|(\^?{{var_name}}))(?=[\s)\]|]|$)
      captures:
        1: meta.function-call.identifier.nu keyword.other.nu
        2: meta.function-call.identifier.nu support.function.nu
        3: meta.function-call.identifier.nu variable.function.nu
      push:
        - meta_content_scope: meta.function-call.arguments.nu
        - match: (?=[)\]|])
          pop: 1
        - include: comment
        - include: expression

  special-statements:
    - include: if-statement
    - include: where-call

  if-statement:
    - match: (if)(?=\s|$)
      captures:
        1: keyword.control.conditional.if.nu
      push:
        - include: expression-if
        - match: (?=\s*[#)\]{}|]|\s*$)
          pop: 1

  row-condition:
    - match: ({{var_name}}) ({{operator}})
      captures:
        1: variable.name.nu
        2: keyword.operator.nu

  where-call:
    - match: (where)(?=\s|$)
      captures:
        1: meta.function-call.identifier.nu support.function.nu
      push:
        - meta_content_scope: meta.function-call.arguments.row-condition.nu
        - include: row-condition
        - include: expression
        - match: (?=\s*[#)\]{}|]|\s*$)
          pop: 1
