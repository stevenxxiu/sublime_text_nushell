%YAML 1.2
---
# - https://www.sublimetext.com/docs/syntax.html
# - https://www.nushell.sh/book/
name: Nushell
file_extensions: [nu]
scope: source.nu

contexts:
  main:
    - include: interpolated_strings
    - include: strings
    - include: punctuation
    - include: comment
    - include: range
    - include: parameter
    - include: keywords  # Comes after `parameter`
    - include: digit
    - include: blockparam
    - include: variable
    - include: variable_keyword
    - include: for_variable
    - include: function
    - include: type

  keywords:
    - match: |-
        (?x:
          \b(
            (zip)|
            (with-column|with-env|window|while|which|where|watch|wrap|when)|
            (value-counts|view-source|version|var)|
            (update)\s(cells)|
            (url)\s(parse)|
            (uppercase|upsert|update|unique|uniq|use|url)|
            (take)\s(until|while)|
            (term)\s(size)|
            (to)\s(arrow|csv|html|json|md|nuon|parquet|text|toml|tsv|url|xml|yaml)|
            (transpose|tutor|touch|table|take|try|to)|
            (seq)\s(char|date)|
            (skip)\s(until|while)|
            (split)\s(chars|column|list|row|words)|
            (str)\s(
              camel-case|capitalize|collect|contains|distance|downcase|ends-with|find-replace|index-of|join|kebab-case|
              length|lpad|pascal-case|replace|reverse|rpad|screaming-snake-case|snake-case|starts-with|substring|
              title-case|to-datetime|to-decimal|to-int|trim|upcase
            )|
            (
              set-with-idx|str-lengths|source-env|str-slice|strftime|split-by|summary|sort-by|shuffle|source|shells|
              select|schema|sample|split|slice|sleep|shift|shape|sort|skip|size|save|sys|sum|str|std|set|seq
            )|
            (random)\s(bool|chars|decimal|dice|integer|uuid)|
            (registry)\s(query)|
            (roll)\s(down|left|right|up)|
            (
              run-external|replace-all|register|rolling|reverse|replace|rotate|return|rename|reject|reduce|random|range|
              roll|rm
            )|
            (query)\s(db|df|json|web|xml)|
            (quantile|query)|
            (path)\s(basename|dirname|exists|expand|join|parse|relative-to|split|type)|
            (par-each|prepend|print|parse|post|port|path|ps|p)|
            (overlay)\s(hide|list|new|use)|
            (or|otherwise|open-df|open)|
            (nu-highlight|nu-example-3|nu-example-2|nu-example-1|nu-check|n-unique|n)|
            (math)\s(abs|avg|ceil|eval|floor|max|median|min|mode|product|round|sqrt|stddev|sum|variance)|
            (metadata|median|mkdir|merge|move|melt|mean|math|mut|min|max|mv)|
            (lowercase|load-env|length|ls-df|lines|loop|list|last|lit|ls)|
            (keybindings)\s(default|list|listen)|
            (keybindings|kill)|
            (join)|
            (into)\s(binary|bool|datetime|decimal|df|duration|filesize|int|lazy|nu|record|sqlite|string)|
            (is-duplicated|is-not-null|is-unique|is-empty|is-admin|is-null|insert|ignore|is-in|input|into|inc|if)|
            (hash)\s(base64|md5|sha256)|
            (help)\s(operators)
            (history)\s(session)|
            (histogram|hide-env|history|headers|hide|help|hash)|
            (
              get-nanosecond|get-weekday|get-ordinal|get-second|get-minute|get-month|group-by|get-year|get-week|
              get-hour|get-day|gstat|group|grid|glob|get|g
            )|
            (format)\s(filesize)|
            (from)\s(csv|eml|ics|ini|json|nuon|ods|parquet|ssv|toml|tsv|url|vcf|xlsx|xml|yaml|yml)|
            (filter-with|fill-null|flatten|fill-na|format|filter|first|fetch|from|find|fmt|fn)|
            (each)\s(while)|
            (encode)(\sbase64)|
            (error)\s(make)|
            (export)\s(alias|def|def-env|extern|use)|
            (export-env|expr-not|explode|export|encode|every|enter|exit|exec|echo|each|env|else)|
            (date)\s(format|humanize|list-timezone|now|to-record|to-table|to-timezone)|
            (decode)\s(base64)|
            (detect)\s(columns)|
            (drop)\s(column|nth)|
            (drop-duplicates|drop-nulls|describe|dummies|default|dtypes|df-not|decode|debug|drop|date|du|do)|
            (config)\s(env|nu|reset)|
            (custom-value)\s(generate|generate2|update)|
            (
              catch|concatenate|commandline|cumulative|count-null|concat-str|continue|contains|complete|compact|columns|
              collect|config|count|clear|cache|char|col|cal|cp|cd
            )|
            (bits)\s(and|not|or|rol|ror|shl|shr|xor)|
            (bytes)\s(add|at|build|collect|ends-with|index-of|length|remove|replace|reverse|starts-with)|
            (benchmark|bytes|break|bits)|
            (ansi)\s(gradient|strip)|
            (
              and|as-datetime|arg-unique|agg-groups|arg-where|all-false|arg-true|arg-sort|all-true|as-date|arg-min|arg-max|append|
              ansi|ast|any|all|agg|as
            )
          )\b
        )
      captures:
        1: keyword.nushell

    - match: \btrue|false
      scope: keyword.other.unit

    - match: \bout>|err>|out\+err>|err\+out>
      scope: keyword.other.redirect

  interpolated_strings:
    - match: \$("|'|`)
      scope: string.interpolated.begin.nushell
      push:
        - meta_scope: string.interpolated.nushell
        - match: \1
          scope: string.interpolated.end.nushell
          pop: 1

  strings:
    - match: \"
      scope: punctuation.definition.string.begin.nushell
      push:
        - meta_scope: string.quoted.double.nushell
        - match: \"
          scope: punctuation.definition.string.end.nushell
          pop: 1

    - match: \'
      scope: punctuation.definition.string.begin.nushell
      push:
        - meta_scope: string.quoted.single.nushell
        - match: \'
          scope: punctuation.definition.string.end.nushell
          pop: 1

    - match: \`
      scope: punctuation.definition.string.begin.nushell
      push:
        - meta_scope: string.quoted.backtick.nushell
        - match: \`
          scope: punctuation.definition.string.end.nushell
          pop: 1

  variable_keyword:
    - match: \$\w+
      scope: variable.language.nushell

  variable:
    - match: (alias|let|let-env)\s+[\$'"]?([$a-z A-Z\d_-]+)['"]?
      scope: variable.nushell
      captures:
        1: keyword.other.nushell
        2: variable.name.nushell

  for_variable:
    - match: (for)\s+([a-z A-Z\d_-]+)(in)
      scope: variable.nushell
      captures:
        1: keyword.other.nushell
        2: variable.name.nushell
        3: keyword.other.nushell

  punctuation:
    # Comma
    - match: \,
      scope: punctuation.comma.nushell

    # Braces
    - match: '[{}]'
      scope: punctuation.brackets.curly.nushell

    # Parentheses
    - match: '[()]'
      scope: punctuation.brackets.round.nushell

    # Semicolon
    - match: ;
      scope: punctuation.semi.nushell

    # Brackets
    - match: '[\[\]]'
      scope: punctuation.brackets.square.nushell

    # Angle brackets
    - match: (?<!=)[<>]
      scope: punctuation.brackets.angle.nushell

  comment:
    - match: (#.*)
      scope: comment.nushell

  range:
    - match: (\d+\.\.\d+)
      scope: constant.nushell

  digit:
    - match: (\b\d+\b)
      scope: constant.numeric.nushell

  parameter:
    - match: (\s-[a-zA-Z_\-]|--[a-zA-Z_\-]{1,50})
      scope: variable.parameter.function.nushell

  blockparam:
    - match: (\|)([a-zA-Z\d, \-_]+)(\|)
      scope: variable.nushell
      captures:
        2: variable.name.nushell

  function:
    - match: \b(def|def-env|extern|module|overlay)\s+(["'a-zA-Z\d_\- ]+)
      scope: entity.name
      captures:
        1: entity.name.function.nushell
        2: entity.name.type.nushell

  type:
    - match: ([a-zA-Z\d\-_ ]+)(\:[A-Za-z\d\-_ ]+)
      name: storage
      captures:
        1: storage.modifier.nushell
        2: storage.type.nushell
