%YAML 1.2
---
# - https://www.sublimetext.com/docs/syntax.html
# - https://www.nushell.sh/book/
name: Nushell
scope: source.nu

file_extensions:
  - nu

first_line_match: |-
  (?xi:
    ^ \#! .* \b(nu)\b            # shebang
  )

variables:
  var_name: '[A-Za-z_][A-Za-z\d\-_]*'
  type_name: '[A-Za-z_][A-Za-z\d\-_]*'
  long_flag: '--[A-Za-z\d\-_]+'
  short_flag: '-[A-Za-z\d\-_]'
  const_str: '[A-Za-z\d\-_]+'
  number: '[+-]?\d+'
  pos_decimal: '\d+(\.\d*)?'
  bare_string: '[^\s#$(),;=\[\]{}]+'
  operator: |-
    (?x:
      \+|-|\*|/|//|mod|\*\*|==|!=|<|<=|>|>=|=~|!~|in|not-in|not|&& and|\|\||or|xor|bit-or|bit-xor|bit-and|bit-shl|
      bit-shr|starts-with|ends-with|\+\+
    )
  native_command: |-
    (?x:
      agg|agg-groups|alias|all|all-false|all-true|ansi\sgradient|ansi\sstrip|ansi|any|append|arg-max|arg-min|arg-sort|
      arg-true|arg-unique|arg-where|as|as-date|as-datetime|ast|benchmark|bits\sand|bits\snot|bits\sor|bits\srol|
      bits\sror|bits\sshl|bits\sshr|bits\sxor|bits|break|bytes\sadd|bytes\sat|bytes\sbuild|bytes\scollect|
      bytes\sends-with|bytes\sindex-of|bytes\slength|bytes\sremove|bytes\sreplace|bytes\sreverse|bytes\sstarts-with|
      bytes|cache|cal|cd|char|clear|col|collect|columns|commandline|compact|complete|concat-str|concatenate|config\senv|
      config\snu|config\sreset|config|const|contains|continue|count|count-null|cp|cumulative|date\sformat|
      date\shumanize|date\slist-timezone|date\snow|date\sto-record|date\sto-table|date\sto-timezone|date|debug|
      decode\sbase64|decode|def|def-env|default|describe|detect\scolumns|df-not|do|drop\scolumn|drop\snth|drop|
      drop-duplicates|drop-nulls|dtypes|du|dummies|each\swhile|each|echo|encode\sbase64|encode|enter|env|error\smake|
      every|exec|exit|explode|explore|export\salias|export\sdef|export\sdef-env|export\sextern|export\suse|export|
      export-env|expr-not|extern|fetch|fill-nan|fill-null|filter|filter-with|find|first|flatten|fmt|for|
      format\sfilesize|format|from\scsv|from\seml|from\sics|from\sini|from\sjson|from\snuon|from\sods|from\sssv|
      from\stoml|from\stsv|from\surl|from\svcf|from\sxlsx|from\sxml|from\syaml|from\syml|from|g|get|get-day|get-hour|
      get-minute|get-month|get-nanosecond|get-ordinal|get-second|get-week|get-weekday|get-year|glob|grid|group|group-by|
      gstat|hash\sbase64|hash\smd5|hash\ssha256|hash|headers|help\soperators|help|hide|hide-env|histogram|
      history\ssession|history|if|ignore|inc|input|insert|into\sbinary|into\sbool|into\sdatetime|into\sdecimal|into\sdf|
      into\sduration|into\sfilesize|into\sint|into\slazy|into\snu|into\srecord|into\ssqlite|into\sstring|into|is-admin|
      is-duplicated|is-empty|is-in|is-not-null|is-null|is-unique|join|keybindings\sdefault|keybindings\slist|
      keybindings\slisten|keybindings|kill|last|length|let|let-env|lines|list|lit|load-env|loop|lowercase|ls|ls-df|
      math\sabs|math\sarccos|math\sarccosh|math\sarcsin|math\sarcsinh|math\sarctan|math\sarctanh|math\savg|math\sceil|
      math\scos|math\scosh|math\se|math\seval|math\sfloor|math\sln|math\slog|math\smax|math\smedian|math\smin|
      math\smode|math\spi|math\sproduct|math\sround|math\ssin|math\ssinh|math\ssqrt|math\sstddev|math\ssum|math\stan|
      math\stanh|math\stau|math\svariance|math|max|mean|median|melt|merge|metadata|min|mkdir|module|move|mut|mv|n|
      n-unique|nu-check|nu-highlight|open|open-df|otherwise|overlay\shide|overlay\slist|overlay\snew|overlay\suse|
      overlay|p|par-each|parse|path\sbasename|path\sdirname|path\sexists|path\sexpand|path\sjoin|path\sparse|
      path\srelative-to|path\ssplit|path\stype|path|port|post|prepend|print|ps|quantile|query\sdb|query\sdf|query\sjson|
      query\sweb|query\sxml|query|random\sbool|random\schars|random\sdecimal|random\sdice|random\sinteger|random\suuid|
      random|range|reduce|register|reject|rename|replace|replace-all|return|reverse|rm|roll\sdown|roll\sleft|
      roll\sright|roll\sup|roll|rolling|rotate|run-external|sample|save|schema|select|seq\schar|seq\sdate|seq|set|
      set-with-idx|shape|shells|shift|shuffle|size|skip\suntil|skip\swhile|skip|sleep|slice|sort|sort-by|source|
      source-env|split\schars|split\scolumn|split\slist|split\srow|split\swords|split|split-by|std|str\scamel-case|
      str\scapitalize|str\scollect|str\scontains|str\sdistance|str\sdowncase|str\sends-with|str\sfind-replace|
      str\sindex-of|str\sjoin|str\skebab-case|str\slength|str\slpad|str\spascal-case|str\sreplace|str\sreverse|
      str\srpad|str\sscreaming-snake-case|str\ssnake-case|str\sstarts-with|str\ssubstring|str\stitle-case|
      str\sto-datetime|str\sto-decimal|str\sto-int|str\strim|str\supcase|str|str-lengths|str-slice|strftime|sum|summary|
      sys|table|take\suntil|take\swhile|take|term\ssize|to\sarrow|to\scsv|to\shtml|to\sjson|to\smd|to\snuon|to\sparquet|
      to\stext|to\stoml|to\stsv|to\surl|to\sxml|to\syaml|to|touch|transpose|try|tutor|uniq|uniq-by|unique|update\scells|
      update|uppercase|upsert|url\sparse|url|use|value-counts|values|var|version|view-source|watch|when|where|which|
      while|window|with-column|with-env|wrap|zip
    )

contexts:
  main:
    - include: assign-variable
    - include: punctuation
    - include: comment
    - include: keyword
    - include: record-block
    - include: for-variable
    - include: module
    - include: command
    - include: extern
    - include: where-call
    - include: function-call
    - include: variable-keyword

  keyword:
    - match: \b(and|catch|else|or)\b
      captures:
        1: keyword.nushell

    - match: \btrue|false
      scope: keyword.other.unit.nushell

    - match: \bout>|err>|out\+err>|err\+out>
      scope: keyword.other.redirect.nushell

  expression:
    - include: date  # Include before integer
    - include: duration  # Include before integer
    - include: binary  # Include before file-size
    - include: file-size  # Include before integer
    - include: range  # Include before integer
    - include: integer
    - include: decimal
    - include: boolean
    - include: operator  # Include after atomic types
    - include: record-block
    - include: list-table
    - include: literal-null
    - include: interpolated-string
    - include: string  # Include last to avoid conflicts

    - include: variable-keyword

  operator:
    - match: ({{operator}})
      scope: keyword.operator.nushell

  date:
    - match: |-
        (?x:
          (\d+)-(0[1-9]|1[012])-(0[1-9]|[12]\d|3[01])
          (
            [Tt]
            ([01]\d|2[0-3]):([0-5]\d):([0-5]\d|60)(\.\d+)?
            (([Zz])|([\+|\-]([01]\d|2[0-3]):[0-5]\d))?
          )?
        )
      scope: constant.date.nushell

  duration:
    - match: '{{pos_decimal}}(ns|us|ms|sec|min|hr|day|wk)'
      scope: constant.duration.nushell

  file-size:
    - match: '{{pos_decimal}}(b|kb|mb|gb|tb|pb|eb|zb|kib|mib|gib|tib|pib|eib|zib)'
      scope: constant.file-size.nushell

  range:
    - match: |-
        (?x:
          {{number}}\.\.<?{{number}}|
          {{number}}\.\.|
          \.\.<?{{number}}
        )
      scope: constant.range.nushell

  integer:
    - match: -?\d+(?!\.)
      scope: constant.numeric.integer.nushell

  decimal:
    - match: '[+-]?((\d*[.])?\d+|Infinity|NaN)'
      scope: constant.numeric.decimal.nushell

  boolean:
    - match: 'true'
      scope: constant.language.boolean.true.nushell
    - match: 'false'
      scope: constant.language.boolean.false.nushell

  binary:
    - include: binary-hex
    - include: binary-bin
    - include: binary-oct

  binary-hex:
    - match: 0x\[
      scope: punctuation.definition.binary.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.binary.hex.nushell
        - include: comment
        - match: '[\da-fA-F]{1,2}'
          scope: constant.numeric.hex.nushell
        - match: \]
          scope: punctuation.definition.binary.end.nushell
          pop: 1

  binary-bin:
    - match: 0b\[
      scope: punctuation.definition.binary.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.binary.bin.nushell
        - include: comment
        - match: '[01]{1,8}'
          scope: constant.numeric.bin.nushell
        - match: \]
          scope: punctuation.definition.binary.end.nushell
          pop: 1

  binary-oct:
    - match: 0o\[
      scope: punctuation.definition.binary.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.binary.oct.nushell
        - include: comment
        - match: '[0-7]{1,3}'
          scope: constant.numeric.oct.nushell
        - match: \]
          scope: punctuation.definition.binary.end.nushell
          pop: 1

  interpolated-string:
    - include: interpolated-single-quoted-string
    - include: interpolated-double-quoted-string

  interpolated-single-quoted-string:
    - match: \$'
      scope: punctuation.definition.string.interpolated.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.interpolated.nushell string.interpolated.single.nushell
        - match: \(
          push:
            - include: expression
            - match: \)
              pop: 1
        - match: \'
          scope: punctuation.definition.string.interpolated.end.nushell
          pop: 1

  interpolated-double-quoted-string:
    - match: \$"
      scope: punctuation.definition.string.interpolated.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.interpolated.nushell string.interpolated.double.nushell
        - match: \(
          push:
            - include: expression
            - match: \)
              pop: 1
        - match: \"
          scope: punctuation.definition.string.interpolated.end.nushell
          pop: 1
        - include: double-quoted-string-content

  string:
    - include: literal-single-quoted-string
    - include: literal-backtick-quoted-string
    - include: literal-double-quoted-string
    - include: literal-bare-string

  literal-single-quoted-string:
    - match: \'
      scope: punctuation.definition.string.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.nushell string.quoted.single.nushell
        - match: \'
          scope: punctuation.definition.string.end.nushell
          pop: 1

  literal-backtick-quoted-string:
    - match: \`
      scope: punctuation.definition.string.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.nushell string.quoted.backtick.nushell
        - match: \`
          scope: punctuation.definition.string.end.nushell
          pop: 1

  double-quoted-string-content:
    - match: \\\n
      scope: constant.character.escape.newline.nushell
    - match: \\(?:[0-7]{3}|x\h{2}|u\h{4}|\U\h{8}|[abefnrtv\\'"?])
      scope: constant.character.escape.nushell

  literal-double-quoted-string:
    - match: \"
      scope: punctuation.definition.string.begin.nushell
      push:
        - meta_include_prototype: false
        - meta_scope: meta.string.nushell string.quoted.double.nushell
        - match: \"
          scope: punctuation.definition.string.end.nushell
          pop: 1
        - include: double-quoted-string-content

  literal-bare-string:
    - match: (?<=[\s()\[\]{}|]|^)(?!\({{bare_string}}\)){{bare_string}}
      scope: string.bare.nushell

  variable-keyword:
    - match: \${{var_name}}
      scope: variable.language.nushell

  assign-variable:
    - match: (alias|let|let-env)\s+(\$?{{var_name}})\s*=
      scope: variable.nushell
      captures:
        1: keyword.other.nushell
        2: variable.name.nushell
      push:
        - include: expression
        - match: \n
          pop: 1

  for-variable:
    - match: (for)\s+(\$?{{var_name}})(in)
      scope: variable.nushell
      captures:
        1: keyword.other.nushell
        2: variable.name.nushell
        3: keyword.other.nushell

  punctuation:
    - match: \,
      scope: punctuation.comma.nushell

    - match: ;
      scope: punctuation.semi.nushell

  comment:
    - match: (#)(.*)
      captures:
        1: comment.line.number-sign.nushell
        2: comment.line.nushell

  literal-null:
    - match: \bnull\b
      scope: constant.language.null.nushell

  record-block:
    - match: (?=\{)
      branch_point: open-curly
      branch:
        - record
        - block

  record:
    - match: '\{'
      scope: punctuation.section.record.begin.nushell
      push:
        - meta_scope: meta.record.nushell
        - include: comment
        - match: \|
          fail: open-curly
        - match: '(?={{var_name}}:)'
          set:
            - meta_scope: meta.record.nushell
            - include: comment
            - match: '({{var_name}})(:)'
              captures:
                1: entity.name.label.nushell
                2: punctuation.separator.key-value.nushell
            - include: expression
            - match: ','
              scope: punctuation.separator.comma.nushell
            - match: '\}'
              scope: punctuation.section.record.end.nushell
              pop: 2

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.nushell
      push:
        - meta_scope: meta.block.nushell
        - include: comment
        - match: \|
          scope: punctuation.section.group.begin.nushell
          set:
            - meta_scope: meta.block.parameters.nushell
            - match: '{{var_name}}'
              scope: variable.parameter.nushell
            - match: \,
              scope: punctuation.separator.parameter.command.nushell
            - match: \|
              scope: punctuation.section.group.end.nushell
              set:
                - meta_scope: meta.block.nushell
                - include: main
                - match: '\}'
                  scope: punctuation.section.block.end.nushell
                  pop: 2

  list-table:
    - match: '\['
      scope: punctuation.section.list-table.begin.nushell
      push:
        - meta_scope: meta.list-table.nushell
        - include: comment
        - match: ;
          scope: punctuation.terminator.header.nushell
        - match: '\]'
          scope: punctuation.section.list-table.end.nushell
          pop: 1
        - match: (?=.|$)
          push:
            - include: expression
            - match: (?=[#;\]])
              pop: 1

  code-block:
    - match: '\{'
      scope: punctuation.section.block.begin.nushell
      push:
        - meta_scope: meta.block.nushell
        - include: main
        - match: '\}'
          scope: punctuation.section.block.end.nushell
          pop: 2

  module:
    - match: \b(module)\s+
      captures:
        1: keyword.module.nushell
      push:
        - meta_scope: meta.module.nushell
        - match: \'
          scope: entity.name.module.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.module.nushell
            - match: \'
              scope: entity.name.module.end.nushell
            - match: \n
              scope: invalid.illegal.newline.nushell

        - match: \`
          scope: entity.name.module.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.module.nushell
            - match: \`
              scope: entity.name.module.end.nushell
            - match: \n
              scope: invalid.illegal.newline.nushell

        - match: \"
          scope: entity.name.module.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.module.nushell
            - match: \"
              scope: entity.name.module.end.nushell
            - match: \n
              scope: invalid.illegal.newline.nushell
            - include: double-quoted-string-content

        - match: ({{var_name}})
          scope: entity.name.module.nushell

        - include: code-block

  command-parameters:
    - meta_scope: meta.command.parameters.nushell
    - match: \[
      scope: punctuation.section.group.begin.nushell
      push:
        - include: command-parameter
        - match: \,
          scope: punctuation.separator.parameter.command.nushell
        - include: comment
        - match: \]
          scope: punctuation.section.group.end.nushell
          pop: 2

  command-parameter:
    - match: |-
        (?x:
          ({{var_name}})
          (\?)?
          (?:
            (:)\s*({{type_name}})
            (?:(@)(".+?"))?
          )?
        )
      captures:
        1: variable.parameter.nushell
        2: keyword.operator.optional.nushell
        3: punctuation.separator.type.nushell
        4: storage.type.nushell
        5: keyword.operator.completion.nushell
        6: variable.function.completion.nushell
    - match: |-
        (?x:
          ({{long_flag}})
          (?:\(({{short_flag}})\))?
          (?:(:)\s*({{type_name}}))?
        )
      captures:
        1: variable.parameter.long.nushell
        2: variable.parameter.short.nushell
        3: punctuation.separator.type.nushell
        4: storage.type.nushell
    - match: |-
        (?x:
          ({{short_flag}})
          (?:(:)\s*({{type_name}}))?
        )
      captures:
        1: variable.parameter.short.nushell
        2: punctuation.separator.type.nushell
        3: storage.type.nushell

  command:
    - match: \b(def|def-env)\s+
      captures:
        1: keyword.declaration.nushell
      push:
        - meta_scope: meta.command.nushell

        - match: \'
          scope: entity.name.command.begin.nushell
          push:
            - meta_include_prototype: false
            - meta_scope: entity.name.command.nushell
            - match: \'
              scope: entity.name.command.end.nushell
              set: command-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: command-parameters

        - match: \`
          scope: entity.name.command.begin.nushell
          push:
            - meta_include_prototype: false
            - meta_scope: entity.name.command.nushell
            - match: \`
              scope: entity.name.command.end.nushell
              set: command-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: command-parameters

        - match: \"
          scope: entity.name.command.begin.nushell
          push:
            - meta_include_prototype: false
            - meta_scope: entity.name.command.nushell
            - match: \"
              scope: entity.name.command.end.nushell
              set: command-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: command-parameters
            - include: double-quoted-string-content

        - match: ({{var_name}})
          scope: entity.name.command.nushell
          set: command-parameters

        - include: code-block

  extern:
    - match: \b(export\s+)?(extern)\s+
      captures:
        1: keyword.extern.nushell
        2: keyword.extern.nushell
      push:
        - meta_scope: meta.extern.nushell
        - match: \'
          scope: entity.name.extern.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.extern.nushell
            - match: \'
              scope: entity.name.extern.end.nushell
              set: extern-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: extern-parameters

        - match: \`
          scope: entity.name.extern.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.extern.nushell
            - match: \`
              scope: entity.name.extern.end.nushell
              set: extern-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: extern-parameters

        - match: \"
          scope: entity.name.extern.begin.nushell
          set:
            - meta_include_prototype: false
            - meta_scope: entity.name.extern.nushell
            - match: \"
              scope: entity.name.extern.end.nushell
              set: extern-parameters
            - match: \n
              scope: invalid.illegal.newline.nushell
              set: extern-parameters
            - include: double-quoted-string-content

        - match: ({{var_name}})
          scope: entity.name.extern.nushell
          set: extern-parameters

  extern-parameters:
    - meta_scope: meta.extern.parameters.nushell
    - match: \[
      scope: punctuation.section.group.begin.nushell
      push:
        - include: command-parameter
        - include: comment
        - match: \]
          scope: punctuation.section.group.end.nushell
          pop: 2

  function-call:
    - match: (?<=^|\s)(?:({{native_command}})|(\^?{{var_name}}))(?=\s|$)
      captures:
        1: meta.function-call.identifier.nushell support.function.nushell
        2: meta.function-call.identifier.nushell variable.function.nushell
      push:
        - meta_content_scope: meta.function-call.arguments.nushell
        - match: (?=\s*[#)\]}|]|\s*$)
          pop: 1
        - include: expression
    - match: \(
      scope: punctuation.section.group.begin.nushell
      push:
        - include: comment
        - match: (?<=^|\s)(?:({{native_command}})|(\^?{{var_name}}))(?=\s|$)
          captures:
            1: meta.function-call.identifier.nushell support.function.nushell
            2: meta.function-call.identifier.nushell variable.function.nushell
          push:
            - meta_content_scope: meta.function-call.arguments.nushell
            - include: comment
            - match: \)
              scope: punctuation.section.group.end.nushell
              pop: 2
            - include: expression

  where-call:
    - match: (?<=^|\s)(where)(?=\s|$)
      captures:
        1: meta.function-call.identifier.nushell support.function.nushell
      push:
        - meta_content_scope: meta.function-call.arguments.nushell
        - match: \s+({{var_name}})?
          captures:
            1: variable.name.nushell
          push:
            - match: (?=\s*[#)\]}|]|\s*$)
              pop: 2
            - include: expression
